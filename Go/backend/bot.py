import telebot
from Where_to_go.Go.Go.settings import TELEGRAM_TOKEN
from Where_to_go.Go.backend.db_tg import *
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from django.core.exceptions import ObjectDoesNotExist

bot = telebot.TeleBot(TELEGRAM_TOKEN, 'HTML')

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = f'@{message.from_user.username}'
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    bot.send_message(message.chat.id, """üö∂‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è""",)
    bot.send_message(message.chat.id, f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {first_name} –≤ Where to go\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ <b>–ú–µ–Ω—é</b>""",)
    # return insert_tg(user_id, username, first_name, last_name)


@bot.message_handler(commands=['go'])
def start_go(message):
    countries = get_countries()
    if countries:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for country in countries:
            markup.add(types.KeyboardButton(country))
        bot.send_message(message.chat.id, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=markup)
        bot.register_next_step_handler(message, select_country)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω.")


def select_country(message):
    country_name = message.text
    regions = get_regions(country_name)
    if regions:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for region in regions:
            markup.add(types.KeyboardButton(region))
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É üåç {country_name}. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)
        bot.register_next_step_handler(message, select_region, country_name)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã.")


def select_region(message, country_name):
    region_name = message.text
    cities = get_cities(region_name)
    if cities:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for city in cities:
            markup.add(types.KeyboardButton(city))
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω {region_name}.\n –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler(message, select_city, country_name, region_name)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥–∞.")


def select_city(message, country_name, region_name):
    city_name = message.text
    categories = get_categories()
    if categories:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("–í—Å–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        for category_id, category_name in categories:
            markup.add(types.KeyboardButton(category_name))
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ üèô {city_name}.\n –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=markup)
        bot.register_next_step_handler(message, select_category, city_name)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


def select_category(message, city_name):
    subcategory = {
        "subcategories.name": "üìç –ù–∞–∑–≤–∞–Ω–∏–µ",
        "subcategories.address": "üó∫ –ê–¥—Ä–µ—Å",
        "subcategories.phone": "üìû –¢–µ–ª–µ—Ñ–æ–Ω",
        "subcategories.description": "üìù –û–ø–∏—Å–∞–Ω–∏–µ",
        "subcategories.image": "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "subcategories.opening_time": "‚è∞ –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è",
        "subcategories.closing_time": "‚è∞ –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è",
        "subcategories.is_friday": "–û—Ç–∫—Ä—ã—Ç–æ –≤ –ø—è—Ç–Ω–∏—Ü—É",
        "subcategories.is_monday": "–û—Ç–∫—Ä—ã—Ç–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "subcategories.is_saturday": "–û—Ç–∫—Ä—ã—Ç–æ –≤ —Å—É–±–±–æ—Ç—É",
        "subcategories.is_sunday": "–û—Ç–∫—Ä—ã—Ç–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        "subcategories.is_thursday": "–û—Ç–∫—Ä—ã—Ç–æ –≤ —á–µ—Ç–≤–µ—Ä–≥",
        "subcategories.is_tuesday": "–û—Ç–∫—Ä—ã—Ç–æ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫",
        "subcategories.is_wednesday": "–û—Ç–∫—Ä—ã—Ç–æ –≤ —Å—Ä–µ–¥—É",
        "subcategories.specific_date": "üìÖ –î–∞—Ç–∞",
        "subcategories.lunch_end": "üïû –û–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞",
        "subcategories.lunch_start": "üïò –ù–∞—á–∞–ª–æ –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞",
    }

    weekdays_mapping = {
        "subcategories.is_monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "subcategories.is_tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "subcategories.is_wednesday": "—Å—Ä–µ–¥–∞",
        "subcategories.is_thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "subcategories.is_friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "subcategories.is_saturday": "—Å—É–±–±–æ—Ç–∞",
        "subcategories.is_sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    base_url = "http://127.0.0.1:8000"
    category_name = message.text
    if category_name == "–í—Å–µ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥—É
        objects = get_objects(city_name)
    else:
        # –ò—â–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = get_categories()
        category_id = next((id for id, name in categories), None)
        if category_id is not None:
            objects = get_objects(city_name, category_id)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return

    if objects:
        response_lines = []
        for obj in objects:
            obj_details = []
            open_days = []
            for field, value in zip(subcategory, obj):
                if field in weekdays_mapping and value:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    open_days.append(weekdays_mapping[field])
                elif field not in weekdays_mapping and value not in (None, False, ""):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∂–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–ª—è
                    obj_details.append(f"<b>{subcategory.get(field, field)}:</b> {value}")

            if open_days:
                obj_details.append(f"<b>üíº –û—Ç–∫—Ä—ã—Ç–æ –≤ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {', '.join(open_days)}")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

            if obj_details:
                response_lines.append("\n".join(obj_details))  # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤

        if response_lines:
            response = "\n\n".join(response_lines)  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            bot.send_message(message.chat.id, f"<b>–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:</b>\n{response}", parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    else:
        bot.send_message(message.chat.id, "–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


bot.polling()
